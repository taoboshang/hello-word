bash:
    1. variable
        1.1 definition and assignment
           1.1.1. general
               variable1="variable1",variable2=2
           1.1.2. readonly variable
               declare -r variable=1 or readonly variable=1
           1.1.3. array variable
               declare -a array=('value1','value2','value3')
        1.2 scope
        1.3 undefinition
            unset
    2. function
    3. 
github:
    1.push
        git  push origin master
        1.1 avoid to input username and password
            1.1.1 create .git-credentials under ~ direction and add content,as follows:
                https://{username}:{password}@github.com   
            1.1.2 run command 'git config --global credential.helper store' and will add related content to ~/.gitconfig, as follows:
                [credential]
                    helper = store
git:
    1. use git user.name to replace current commit author
        git commit --amend --reset-author
docker:
    1. access vm local registry.
       run command "service firewalld stop" in vm based on centos7

    2. build based image: note: -static , it indicate the compiler will compile all code to bin.
        FROM gcc:5 as builder
        COPY ./helloworld.c /helloworld.c
        RUN  gcc -o hello -static /helloworld.c && chmod +x hello

        FROM scratch
        COPY --from=builder /hello /hello
        CMD  ["/hello"]    
    3. add bash, ash, sh, csh and so on. add ls and other bin from other base image.
        COPY --from=busybox /bin/ash /bin/ash
        COPY --from=busybox /bin/ls /bin/ls
    4. copy file from running-container
        docker run -d --name nginx-name nginx
        docker cp nginx-name:/etc/nginx/nginx.conf .


    5. deploy a simple nginx
        5.1 docker pull nginx
        # '/root/www/nginx/html' need to be created by yourself. '/usr/share/nginx/html' is the nginx root direction.
        5.2 docker run -d -p 8080:80 --name nginx -v /root/www/nginx/html:/usr/share/nginx/html nginx
        5.3 curl http://localhost:8080 or input "http://hostip:8080" in browser.
    6. deploy a simple nginx + php-fpm
        6.1 docker pull nginx
        6.2 docker pull bitnami/php-fpm
        6.3 docker run -d --name php-fpm  -v /root/www/php/html:/app/html bitnami/php-fpm
        6.4 docker run -d --name nginx -p 8080:80 -v /root/www/nginx/html:/usr/local/share/html nginx
        6.5 docker cp nginx:/etc/nginx/conf.d/default.conf .
        6.6 the changes,as follows:
            server {
    listen       80;
    server_name  www.shang.com;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/local/share/nginx/html;
        index  index.php index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    location ~ \.php$ {
        root           html;
        fastcgi_pass   172.17.0.2:9000;#172.17.0.2 is php-fpm contanier address, docker inspect php-fpm will get the address
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /app/html/$fastcgi_script_name;
        include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


        6.7 docker cp default.conf nginx:/etc/nginx/conf.d/default.conf
        6.8 docker container restart nginx
        6.9 cd /root/www/php/html && touch index.php
            the index.php content, as follows:
            <?php
echo "Hello World!";
?>
       6.10 curl http://localhost:8080/index.php
